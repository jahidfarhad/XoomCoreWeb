@{
	ViewData["Title"] = "Home Page";
}

<!-- Bootstrap Icons CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary" id="registerBtn" data-mdb-modal-init data-mdb-target="#registerModal">
	Registration Form
</button>

<div class="d-flex" style="height: 20px;">
</div>

<table class="table table-bordered table-striped" id="employeeTable">
	<thead>
		<tr>
			<th class="text-center">SL</th>
			<th class ="text-center">First Name</th>
			<th class="text-center">Last Name</th>
			<th class="text-center">Date of Birth</th>
			<th class="text-center">Email</th>
			<th class="text-center">Phone</th>
			<th class="text-center">City</th>
			@* <th class="text-center">Gender</th> *@
			<th class="text-center">Actions</th>

		</tr>
	</thead>
	<tbody id="dataContainer"></tbody>
</table>

<div class="modal fade" id="registerModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog d-flex justify-content-center">
		<div class="modal-content w-75">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">Registration Form</h5>
				<button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body p-4" style="max-height: 500px; overflow-y: auto;">
				<form id="registrationForm" class="g-3 needs-validation" novalidate>

					<div class="form-outline mb-3">
						<label for="textFirstName" class="form-label">First Name</label>
						<input type="text" class="form-control" id="textFirstName" required>
						<div class="invalid-feedback">
							Please enter a First Name
						</div>
					</div>

					<div class="form-outline mb-3">
						<label for="textLastName" class="form-label">Last Name</label>
						<input type="text" class="form-control" id="textLastName" required>
						<div class="invalid-feedback">
							Please enter a Last Name
						</div>
					</div>

					<div class="form-outline mb-3">
						<label for="textBirthDate" class="form-label">Date of Birth</label>
						<input type="date" class="form-control" id="textBirthDate" required>
						<div class="invalid-feedback">
							Please enter a Date of Birth
						</div>
					</div>

					<div class="form-outline mb-3">
						<label for="textEmail" class="form-label">Email</label>
						<input type="email" class="form-control" id="textEmail" required>
						<div class="invalid-feedback">
							Please enter a valid Email Address
						</div>
					</div>

					<div class="form-outline mb-3">
						<label for="numPhone" class="form-label">Phone</label>
						<input type="tel" class="form-control" id="numPhone" pattern="^\d{11}$" required>
						<div class="invalid-feedback">
							Please enter a valid Phone Number
						</div>
					</div>

					<div class="form-outline mb-3">
						<label for="textCity" class="form-label">City</label>
						<select class="form-select" id="textCity" required>
							<option selected disabled value="">Choose...</option>
							<option>Dhaka</option>
							<option>Chittagon</option>
							<option>Khulna</option>
							<option>Rajshahi</option>
							<option>Sylhet</option>
						</select>
						<div class="invalid-feedback">
				 			Please select a valid City
				 		</div>
					</div>

					@* <div class="form-outline mb-3"> *@
					@* 	<label class="form-label">Gender</label> *@
					@* 	<div class="form-check"> *@
					@* 		<input class="form-check-input" type="radio" name="gender" id="genderMale" value="Male" required> *@
					@* 		<label class="form-check-label" for="genderMale"> *@
					@* 			Male *@
					@* 		</label> *@
					@* 	</div> *@
					@* 	<div class="form-check"> *@
					@* 		<input class="form-check-input" type="radio" name="gender" id="genderFemale" value="Female" required> *@
					@* 		<label class="form-check-label" for="genderFemale"> *@
					@* 			Female *@
					@* 		</label> *@
					@* 	</div> *@
					@* 	<div class="form-check"> *@
					@* 		<input class="form-check-input" type="radio" name="gender" id="genderOther" value="Other"> *@
					@* 		<label class="form-check-label" for="genderOther"> *@
					@* 			Other *@
					@* 		</label> *@
					@* 	</div> *@
					@* 	<div class="invalid-feedback"> *@
					@* 		Please select a gender *@
					@* 	</div> *@
					@* </div> *@

					<br />

					<div class="col-12">
						<button id="click_button" class="btn btn-primary" type="submit">Submit Form</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog d-flex justify-content-center">
		<div class="modal-content w-75">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel2">Update Form</h5>
				<button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body p-4">
				<form id="updateForm" class="g-3 needs-validation" novalidate>

					<div class="form-outline mb-3">
						<label for="textFirstName2" class="form-label">First Name</label>
						<input type="text" class="form-control" id="textFirstName2" required>
					</div>

					<div class="form-outline mb-3">
						<label for="textLastName2" class="form-label">Last Name</label>
						<input type="text" class="form-control" id="textLastName2" required>
					</div>

					<div class="form-outline mb-3">
						<label for="textBirthDate2" class="form-label">Date of Birth</label>
						<input type="date" class="form-control" id="textBirthDate2" required>
					</div>

					<div class="form-outline mb-3">
						<label for="textEmail2" class="form-label">Email</label>
						<input type="text" class="form-control" id="textEmail2" required>
					</div>

					<div class="form-outline mb-3">
						<label for="numPhone2" class="form-label">Phone</label>
						<input type="number" class="form-control" id="numPhone2" required>
					</div>

					<div class="form-outline mb-3">
						<label for="textCity2" class="form-label">City</label>
						<select class="form-select" id="textCity2" required>
							<option selected disabled value="">Choose...</option>
							<option>Dhaka</option>
							<option>Chittagon</option>
							<option>Khulna</option>
							<option>Rajshahi</option>
							<option>Sylhet</option>
						</select>
					</div>

					<br />

					<div class="col-12">
						<button id="click_button2" class="btn btn-primary" type="submit">Submit Form</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

@section scripts {
	<script>
		$(document).ready(function () {
			console.log("Hello World!");
		});

		document.querySelector('.btn-close').addEventListener('click', function() {
			$('#registerModal').modal('hide');
		});
		
		$("#registerBtn").click(function(e){
			e.preventDefault();
			$("#registrationForm").trigger("reset");
			$("#registrationForm").removeClass('was-validated');
			$('#registerModal').modal('show');

		});

		$("#registrationForm").submit(async function(e){
			e.preventDefault();
			var form = document.getElementById("registrationForm");
			if (!form.checkValidity()) {
				e.stopPropagation();
			}
			else
			{
				let createRequest={
					FirstName:$("#textFirstName").val(),
					LastName:$("#textLastName").val(),
					BirthDate:$("#textBirthDate").val(),
					Email:$("#textEmail").val(),
					Phone:$("#numPhone").val(),
					City:$("#textCity").val()
				}
				console.log(createRequest);

				// Fetch menu data using sendRequest
				const url = "/CreateEmployeeRequest";

				try {

					const options = {
						method: "POST",
						headers: {
							'Content-Type': 'application/json'
						}
					};
					if (createRequest) {
						options.body = JSON.stringify(createRequest);
					}
					const response = await fetch(url, options);

					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}
					const result = await response.json();
					//return result;
					console.log("result",result);

					if (!result.isValid) {
						alert("Error")
						//showToast(response.responseCode, response.messageType, response.message);
					}
					else {
						//alert("Submitted")
						$('#registerModal').modal('hide');
						getEmployeeData();

					}
				} catch (error) {
					console.error(error);
				}

			};
		});

		getEmployeeData();
		async function getEmployeeData(){
			console.log("getEmployeeData() called");

			const url = "/GetEmployeeList";

				try {
					const options = {
						method: "POST",
						headers: {
							'Content-Type': 'application/json'
						}
					};

					const response = await fetch(url, options);

					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}
					const result = await response.json();
					//return result;
					console.log("result",result);

					displayData(result);
					if (!result.isValid) {
						alert("Error")
						//showToast(response.responseCode, response.messageType, response.message);
					}
					else {
						//alert("Submitted")
					}
				} catch (error) {
					console.error(error);
				}
		}

		function displayData(responseData){

			$("#dataContainer").empty();

			$.each(responseData.data, function (index, value) {
				var slnocell = $("<td>").attr("scope", "row").append(index + 1);
				var firstName = $("<td>").append(value.firstName);
				var lastName = $("<td>").append(value.lastName);
				var birthDate = $("<td>").append(value.birthDate);
				var email = $("<td>").append(value.email);
				var phone = $("<td>").append(value.phone);
				var city = $("<td>").append(value.city);

				var iconcell = $("<td>");
				var icondiv = $("<div>").attr("class", "d-flex justify-content-center").appendTo(iconcell);
				var editIcon = $("<i>").attr({
					"class": "bi bi-pencil",
					"style": "font-size: 17px; padding: 10px; cursor: pointer;",
					"title": "Edit"
				}).appendTo(icondiv);
				var deleteIcon = $("<i>").attr({
					"class": "bi bi-trash",
					"style": "font-size: 17px; padding: 10px; cursor: pointer;",
					"title": "Delete"
				}).appendTo(icondiv);


				$("<tr>").attr("class", "text-center").append(slnocell, firstName, lastName, birthDate, email, phone, city, iconcell).appendTo("#dataContainer");

				(function ($) {
					editIcon.on("click", function (e) {
						e.preventDefault();
						console.log("edit",value)
						$("#updateModal").modal("show");

						$("#textFirstName2").data("EmployeeId",value.id);
						$("#textFirstName2").val(value.firstName);
						$("#textLastName2").val(value.lastName);
						$("#textBirthDate2").val(value.birthDate);
						$("#textEmail2").val(value.email);
						$("#numPhone2").val(value.phone);
						$("#textCity2").val(value.city);

						$("#updateForm").submit(async function(e){
						e.preventDefault();
						var form = document.getElementById("updateForm");
						if (!form.checkValidity()) {
							e.stopPropagation();
						}
						else
						{

							let createRequest={
                                Id:$("#textFirstName2").data("EmployeeId"),
								FirstName:$("#textFirstName2").val(),
								LastName:$("#textLastName2").val(),
								BirthDate:$("#textBirthDate2").val(),
								Email:$("#textEmail2").val(),
								Phone:$("#numPhone2").val(),
								City:$("#textCity2").val()
							}
							console.log(createRequest);

							// Fetch menu data using sendRequest
							const url = "/UpdateEmployeeRequest";

							try {

								const options = {
									method: "POST",
									headers: {
										'Content-Type': 'application/json'
									}
								};
								if (createRequest) {
									options.body = JSON.stringify(createRequest);
								}
								const response = await fetch(url, options);

								if (!response.ok) {
									throw new Error(`HTTP error! status: ${response.status}`);
								}
								const result = await response.json();
								//return result;
								console.log("result",result);

								if (!result.isValid) {
									alert("Error")
									//showToast(response.responseCode, response.messageType, response.message);
								}
								else {
									//alert("Submitted")
									$('#updateModal').modal('hide');
									getEmployeeData();
								}
							} catch (error) {
								console.error(error);
							}

						};
					});
					});

					deleteIcon.on("click", function (e) {

						e.preventDefault();
						$("#ls_delete_company_modal").modal("show");
						$("#ls_delete_company_id_hidden").data("companyId", value.CompanyId);
					});

				})(jQuery);


			});
		}

		$("#click_button").click(function(){
			console.log("Button Clicked");

			let showInfo={
				FirstName:$("#textFirstName").val(),
				LastName:$("#textLastName").val(),
				BirthDate:$("#textBirthDate").val(),
				Email:$("#textEmail").val(),
				Phone:$("#numPhone").val(),
				City:$("#textCity").val()
			}
			console.log(showInfo);
		});

		// Example starter JavaScript for disabling form submissions if there are invalid fields
		(() => {
		  'use strict'

		  // Fetch all the forms we want to apply custom Bootstrap validation styles to
		  const forms = document.querySelectorAll('.needs-validation')

		  // Loop over them and prevent submission
		  Array.from(forms).forEach(form => {
			form.addEventListener('submit', event => {
			  if (!form.checkValidity()) {
				event.preventDefault()
				event.stopPropagation()
			  }

			  form.classList.add('was-validated')
			}, false)
		  })
		})()
	</script>
}