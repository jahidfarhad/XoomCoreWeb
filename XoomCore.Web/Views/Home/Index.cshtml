@{
	ViewData["Title"] = "Home Page";
}

<button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary" id="registerBtn" data-mdb-modal-init data-mdb-target="#registerModal">
	Registration Form Modal
</button>

<table class="table table-bordered table-striped">
	<thead class="table-dark">
		<tr>
			<th>#</th>
			<th>Birth Date</th>
			<th>City</th>
			<th>Email</th>
			<th>First Name</th>
			<th>Last Name</th>
			<th>Phone</th>
		</tr>
	</thead>
	<tbody id="dataContainer"></tbody>
</table>

<div class="modal fade" id="registerModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog d-flex justify-content-center">
		<div class="modal-content w-75">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel2">Registration Form</h5>
				<button type="button" data-mdb-button-init data-mdb-ripple-init class="btn-close" data-mdb-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body p-4">
				<form id="registrationForm" class="g-3 needs-validation" novalidate>

					<div class="form-outline mb-3">
				 		<label for="textFirstName" class="form-label">First Name</label>
				 		<input type="text" class="form-control" id="textFirstName" required>
				 	</div>

					<div class="form-outline mb-3">
				 		<label for="textLastName" class="form-label">Last Name</label>
				 		<input type="text" class="form-control" id="textLastName" required>
				 	</div>

					<div class="form-outline mb-3">
				 		<label for="textBirthDate" class="form-label">Date of Birth</label>
				 		<input type="date" class="form-control" id="textBirthDate" required>
				 	</div>

					<div class="form-outline mb-3">
				 		<label for="textEmail" class="form-label">Email</label>
				 		<input type="text" class="form-control" id="textEmail" required>
				 	</div>

					<div class="form-outline mb-3">
				 		<label for="numPhone" class="form-label">Phone</label>
				 		<input type="number" class="form-control" id="numPhone" required>
				 	</div>

					<div class="form-outline mb-3">
				 		<label for="textCity" class="form-label">City</label>
				 		<select class="form-select" id="textCity" required>
				 			<option selected disabled value="">Choose...</option>
				 			<option>Dhaka</option>
				 			<option>Chittagon</option>
				 			<option>Khulna</option>
				 			<option>Rajshahi</option>
				 			<option>Sylhet</option>
				 		</select>
				 		@*<div class="invalid-feedback">
				 			Please select a valid state
				 		</div>*@
				 	</div>

				 	<br />

				 	<div class="col-12">
				 		<button id="click_button" class="btn btn-primary" type="submit">Submit Form</button>
				 	</div>

				 </form>
			</div>
		</div>
	</div>
</div>

@section scripts {

	<script>
		$(document).ready(function () {
			console.log("Hello World!");
		});

		$("#registerBtn").click(function(e){
			e.preventDefault();

			$('#registerModal').modal('show');

		});

		$("#registrationForm").submit(async function(e){
			e.preventDefault();
			var form = document.getElementById("registrationForm");
			if (!form.checkValidity()) {
				e.stopPropagation();
			}
			else
			{

				let createRequest={
					FirstName:$("#textFirstName").val(),
					LastName:$("#textLastName").val(),
					BirthDate:$("#textBirthDate").val(),
					Email:$("#textEmail").val(),
					Phone:$("#numPhone").val(),
					City:$("#textCity").val()
				}
				console.log(createRequest);
				// Fetch menu data using sendRequest
				const url = "/CreateEmployeeRequest";

				try {

					const options = {
						method: "POST",
						headers: {
							'Content-Type': 'application/json'
						}
					};
					if (createRequest) {
						options.body = JSON.stringify(createRequest);
					}
					const response = await fetch(url, options);

					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}
					const result = await response.json();
					//return result;
					console.log("result",result);

					if (!result.isValid) {
						alert("Error")
						//showToast(response.responseCode, response.messageType, response.message);
					}
					else {
						//alert("Submitted")
                        $('#registerModal').modal('hide');
						getEmployeeData();

					}
				} catch (error) {
					console.error(error);
				}

			};
		});

		getEmployeeData();
		async function getEmployeeData(){
			console.log("getEmployeeData() called");

			const url = "/GetEmployeeList";

				try {

					const options = {
						method: "POST",
						headers: {
							'Content-Type': 'application/json'
						}
					};
					
					const response = await fetch(url, options);

					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}
					const result = await response.json();
					//return result;
					console.log("result",result);

					displayData(result);
					if (!result.isValid) {
						alert("Error")
						//showToast(response.responseCode, response.messageType, response.message);
					}
					else {
						//alert("Submitted")
					}
				} catch (error) {
					console.error(error);
				}
		}
		function displayData(responseData) {
			const container = document.getElementById("dataContainer");
			let htmlContent = "";

			responseData.data.forEach((item, index) => {
				htmlContent += `<tr>
									<td>${index + 1}</td>
									<td>${item.birthDate}</td>
									<td>${item.city}</td>
									<td>${item.email}</td>
									<td>${item.firstName}</td>
									<td>${item.lastName}</td>
									<td>${item.phone}</td>
								</tr>`;
			});

			container.innerHTML = htmlContent;
		}


		$("#click_button").click(function(){
			console.log("Button Clicked");

			let showInfo={
				FirstName:$("#textFirstName").val(),
				LastName:$("#textLastName").val(),
				BirthDate:$("#textBirthDate").val(),
				Email:$("#textEmail").val(),
				Phone:$("#numPhone").val(),
				City:$("#textCity").val()
			}
			console.log(showInfo);
		});

		// Example starter JavaScript for disabling form submissions if there are invalid fields
		(() => {
		  'use strict'

		  // Fetch all the forms we want to apply custom Bootstrap validation styles to
		  const forms = document.querySelectorAll('.needs-validation')

		  // Loop over them and prevent submission
		  Array.from(forms).forEach(form => {
			form.addEventListener('submit', event => {
			  if (!form.checkValidity()) {
				event.preventDefault()
				event.stopPropagation()
			  }

			  form.classList.add('was-validated')
			}, false)
		  })
		})()
	</script>
}